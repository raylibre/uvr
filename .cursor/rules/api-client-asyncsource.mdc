---
description: 
globs: 
alwaysApply: false
---
# API Client with AsyncSource Usage Guidelines

Use the centralized `apiClient` from `'./api-client'` with `AsyncSource` library for all API interactions. This ensures consistent error handling, loading states, and authentication across the application.

## Basic Pattern

### 1. Import Required Dependencies
```typescript
import apiClient from './api-client';
import AsyncSource from 'async-source';
import { reactive, computed } from 'vue';
```

### 2. Create API Service Functions
Always create dedicated service functions that use the apiClient:

```typescript
// services/api/example-service.ts
import apiClient from './api-client';

export async function fetchUserData(userId: string) {
  const response = await apiClient.get(`/users/${userId}`);
  return response.data;
}

export async function updateUserData(userId: string, userData: any) {
  const response = await apiClient.put(`/users/${userId}`, userData);
  return response.data;
}

export async function createUser(userData: any) {
  const response = await apiClient.post('/users', userData);
  return response.data;
}

export async function deleteUser(userId: string) {
  const response = await apiClient.delete(`/users/${userId}`);
  return response.data;
}
```

### 3. Use AsyncSource with API Services
Create reactive AsyncSource instances for handling API calls:

```typescript
import { fetchUserData, updateUserData } from '~/services/api/user-service';
import AsyncSource from 'async-source';
import { reactive, computed } from 'vue';

// Create reactive AsyncSource instance
const userDataSource = reactive(new AsyncSource(fetchUserData, handleError));
const updateUserSource = reactive(new AsyncSource(updateUserData, handleError));

// Access loading states
const isLoading = computed(() => userDataSource.isLoading);
const isUpdating = computed(() => updateUserSource.isLoading);

// Error handler
function handleError(error: any) {
  console.error('API Error:', error);
  // Use notification service for user feedback
  notifyError(error.message || 'An error occurred');
}
```

### 4. Make API Calls with AsyncSource
Use the `push` method to trigger API calls:

```typescript
// Fetch data
function loadUserData(userId: string) {
  userDataSource.push(handleSuccess, { userId });
}

// Update data
function saveUserData(userId: string, userData: any) {
  updateUserSource.push(handleUpdateSuccess, { userId, userData });
}

// Success handlers
function handleSuccess(response: any) {
  // Process successful response
  console.log('Data loaded:', response);
}

function handleUpdateSuccess(response: any) {
  // Process successful update
  console.log('Data updated:', response);
  // Optionally refresh the data
  loadUserData(response.id);
}
```

## Advanced Patterns

### Shared AsyncSource Instances
For data that needs to be shared across multiple components:

```typescript
import { getSharedAsyncSource, removeSharedAsyncSource } from '~/services/async-source-service';

// Get or create shared instance
const sharedUserDataSource = getSharedAsyncSource(
  'userData',
  null,
  fetchUserData,
  handleError
);

// Clean up when component unmounts
onBeforeUnmount(() => {
  removeSharedAsyncSource('userData', fetchUserData);
});
```

### URL Constants
Always use URL constants for API endpoints:

```typescript
// constants/url-constants.ts
export const API_BASE = '/api/v1';
export const USERS_ENDPOINT = `${API_BASE}/users`;
export const PROFILE_ENDPOINT = `${API_BASE}/profile`;

// In service files
import { USERS_ENDPOINT } from '~/constants/url-constants';

export async function fetchUsers() {
  const response = await apiClient.get(USERS_ENDPOINT);
  return response.data;
}
```

### Error Handling Best Practices
Implement consistent error handling patterns:

```typescript
import { notifyError } from '~/services/notification-service';

function handleApiError(error: any) {
  if (error.response) {
    // Handle HTTP errors
    switch (error.response.status) {
      case 404:
        notifyError('Resource not found');
        break;
      case 403:
        notifyError('Access denied');
        break;
      case 422:
        notifyError('Validation error: ' + error.response.data.message);
        break;
      default:
        notifyError('Server error occurred');
    }
  } else if (error.request) {
    // Network error
    notifyError('Network error. Please check your connection.');
  } else {
    // Other errors
    notifyError('An unexpected error occurred');
  }
  
  console.error('API Error:', error);
}
```

## Vue Component Integration

### Template Usage
Use loading states and error handling in templates:

```vue
<template>
  <div v-loading="isLoading" class="min-h-screen">
    <div v-if="error" class="error-message">
      {{ error }}
    </div>
    <div v-else-if="data">
      <!-- Display data here -->
    </div>
  </div>
</template>

<script setup lang="ts">
import { reactive, computed, onMounted } from 'vue';
import AsyncSource from 'async-source';
import { fetchUserData } from '~/services/api/user-service';

const userDataSource = reactive(new AsyncSource(fetchUserData, handleError));

const isLoading = computed(() => userDataSource.isLoading);
const data = computed(() => userDataSource.data);
const error = ref<string | null>(null);

onMounted(() => {
  loadData();
});

function loadData() {
  error.value = null;
  userDataSource.push(handleSuccess, { userId: 'current-user' });
}

function handleSuccess(response: any) {
  // Data is automatically available in userDataSource.data
}

function handleError(err: any) {
  error.value = err.message || 'Failed to load data';
}
</script>
```

## Key Rules to Follow

1. **Always use apiClient**: Never create separate axios instances. Use the centralized apiClient from `'./api-client'`.

2. **Service Layer**: Create dedicated service functions for each API endpoint. Don't make direct apiClient calls in components.

3. **AsyncSource Integration**: Always wrap API service functions with AsyncSource for consistent loading states and error handling.

4. **Reactive Instances**: Use `reactive()` wrapper for AsyncSource instances to ensure Vue reactivity.

5. **Error Handling**: Implement consistent error handling patterns and use the notification service for user feedback.

6. **URL Constants**: Define API endpoints as constants and reuse them across services.

7. **Cleanup**: Always clean up shared AsyncSource instances in `onBeforeUnmount`.

8. **Loading States**: Use AsyncSource's `isLoading` property to show loading indicators.

## Anti-Patterns to Avoid

❌ **Don't do this:**
```typescript
// Direct axios usage
import axios from 'axios';
const response = await axios.get('/api/users');

// Direct apiClient usage in components
import apiClient from './api-client';
const response = await apiClient.get('/api/users');

// Non-reactive AsyncSource
const source = new AsyncSource(fetchData, handleError); // Missing reactive()
```

✅ **Do this instead:**
```typescript
// Proper service layer
import { fetchUsers } from '~/services/api/user-service';

// Reactive AsyncSource
const userSource = reactive(new AsyncSource(fetchUsers, handleError));
```
